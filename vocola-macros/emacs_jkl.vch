#############################################################################
# #
# Primitives useful in defining Gnuemacs voice macros #
# #
#############################################################################


##
## Saving and restoring to Emacs registers
##
## Registers are named by a single character.
##

# This register is for internal use by macros.
ScratchRegister() := "~";

SavePoint (register) := "{ctrl+x}r " $register;
RestorePoint(register) := "{ctrl+x}j" $register;

# Execute $actions then restore point to where it was before:
SaveExcursion(actions) := SavePoint(ScratchRegister())
$actions
RestorePoint(ScratchRegister());


# note that these do not affect the kill ring:
CopyToRegister (register) := {ctrl+x}rs $register;
CutToRegister (register) := {ctrl+u}1 {ctrl+x}rs $register;
YankFromRegister(register) := {ctrl+x}ri $register;


# delete from point to start-of-line leaving kill ring alone:
EraseToStart() := {ctrl+space} {home} CutToRegister(ScratchRegister());



##
## Mark Lillibridge's Occurs function
##
## Requires occurs.el elisp code has been loaded into Gnuemacs.
##

#
# Look for occurrences of $regex in current buffer:
#
# if none, display no matches message in minibuffer
# if one, jump to the start of that occurrence
# otherwise, open an *occurs* buffer showing all of the occurrences
# (may replace current window if enough occurrences exist)
#
Occurs(regex) := {esc}x mdl-occur {enter} $regex {enter};

# same, but always case-sensitive:
OccursNoFold(regex) := {esc}x mdl-occur-no-fold {enter} $regex {enter};



##
## Implementation of Mark Lillibridge's leap functions v1.2 for gnuemacs
##
## Requires leap.el elisp code has been loaded into gnuemacs.
##

include "leap_gnuemacs.vch";


##
## Jump to nearest line whose line number is equal to N mod 100.
##
## Requires line-numbers.el has been loaded into gnuemacs.
##

LineMod(n) := {ctrl+u} $n {esc}G;

